[['argument_1 == "b"', 'd'],['argument_2 == "AF"', 'Y'],[str('TOTAL_ARGUMENT' + '==' + str(['f','AF'])),'TOTALCHECK']]
[['Popen([\'python\',C:\\An\\MIRA\\Mira.py, print("test")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['test\\n']\n", "['already saw that 2\\n']\n"]]]
[['TOTAL_ARGUMENT == \'print("qhy")\'', 'None']]
[['Popen([\'python\',C:\\An\\MIRA\\Mira.py, print("qhy")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['qhy\\n']\n"]]]
[['TOTAL_ARGUMENT == \'print("subversively")\'', 'None']]
[['Popen([\'python\',C:\\An\\MIRA\\Mira.py, print("test")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['test\\n']\n", "['already saw that 2\\n']\n", "['test\\n']\n", "['test\\n']\n", '["ERROR IS  name \'argument_1\' is not defined\\n"]\n', "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", '["ERROR IS  name \'a\' is not defined\\n"]\n', '["ERROR IS  name \'b\' is not defined\\n"]\n', '["ERROR IS  name \'argument_1\' is not defined\\n"]\n', "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", "['WHAT IS COMPOSEMETA []\\n']\n", "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", '["ERROR IS  name \'argument_1\' is not defined\\n"]\n', '[\'WHAT IS COMPOSEMETA [[\\\'print("test")\\\', \\\'None\\\']]\\n\']\n', "['WHAT IS COMPOSEMETA []\\n']\n", "['test\\n']\n", "['test\\n']\n", '["ERROR IS  name \'a\' is not defined\\n"]\n', '["ERROR IS  name \'b\' is not defined\\n"]\n', "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", '["ERROR IS  name \'argument_1\' is not defined\\n"]\n', '[\'WHAT IS COMPOSEMETA [[\\\'print("test")\\\', \\\'None\\\']]\\n\']\n', "['WHAT IS COMPOSEMETA []\\n']\n", '[\'ShortMem [[[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n', '[\'LongMem [[[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n', '[\'near field is [[[\\\'print("test")\\\', \\\'None\\\']], [[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\Mira.py, print("test")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['test\\n']\n", "['already saw that 2\\n']\n", "['test\\n']\n", "['test\\n']\n", '["ERROR IS  name \'argument_1\' is not defined\\n"]\n', "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", "['WHAT IS COMPOSEMETA []\\n']\n", "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", "['WHAT IS COMPOSEMETA []\\n']\n", "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", "['test\\n']\n", "['test\\n']\n", '["ERROR IS  name \'a\' is not defined\\n"]\n', '["ERROR IS  name \'b\' is not defined\\n"]\n', "['ERROR IS  invalid syntax (<string>, line 1)\\n']\n", '["ERROR IS  name \'argument_1\' is not defined\\n"]\n', '[\'WHAT IS COMPOSEMETA [[\\\'print("test")\\\', \\\'None\\\']]\\n\']\n', "['WHAT IS COMPOSEMETA []\\n']\n", "['ShortMem []\\n']\n", '[\'LongMem [[[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n', '[\'near field is [[[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\Mira.py, print("test")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['test\\n']\n", "['already saw that 2\\n']\n", "['test\\n']\n", "['test\\n']\n", "['test\\n']\n", "['test\\n']\n", "['ShortMem []\\n']\n", '[\'LongMem [[[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n', '[\'near field is [[[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n']]]
[["TOTAL_ARGUMENT == 'Cloneinit()'", 'None']]
[["Popen(['python',C:\\An\\MIRA\\Mira.py, Cloneinit()], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ['["ShortMem [[[\'Cloneinit()\', \'None\']]]\\n"]\n', "['LongMem []\\n']\n", '["near field is [[[\'Cloneinit()\', \'None\']]]\\n"]\n']]]
[["TOTAL_ARGUMENT == 'what now?'", ['', SyntaxError('invalid syntax', ('<string>', 1, 8, 'what now?'))]]]
[["Popen(['python',C:\\An\\MIRA\\Mira.py, what now?], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['error is  invalid syntax (<string>, line 1)\\n']\n", "['code died\\n']\n", '["ShortMem [[[\'what now?\', [\'\', SyntaxError(\'invalid syntax\', (\'<string>\', 1, 8, \'what now?\'))]]]]\\n"]\n', "['LongMem []\\n']\n", '["near field is [[[\'what now?\', [\'\', SyntaxError(\'invalid syntax\', (\'<string>\', 1, 8, \'what now?\'))]]]]\\n"]\n']]]
[["TOTAL_ARGUMENT == '1+1'", '2']]
[["Popen(['python',C:\\An\\MIRA\\Mira.py, 1+1], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ['["near field is [[[\'1+1\', \'2\']]]\\n"]\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\Mira.py, print("test")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['test\\n']\n", "['already saw that 2\\n']\n", "['test\\n']\n", "['test\\n']\n", "['test\\n']\n", "['test\\n']\n", '[\'near field is [[[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n', "['Traceback (most recent call last):\\n']\n", '[\'  File "C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py", line 148, in <module>\\n\']\n', "['    if fcheck(inputtext) == False:\\n']\n", '["NameError: name \'fcheck\' is not defined\\n"]\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\Mira.py, print("test")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['test\\n']\n", "['already saw that 2\\n']\n", "['test\\n']\n", "['test\\n']\n", "['test\\n']\n", "['test\\n']\n", '[\'near field is [[[\\\'print("test")\\\', \\\'None\\\']]]\\n\']\n', "['f1 is function? Applyfunc False\\n']\n", "['supposed answer []\\n']\n"]]]
[["Popen(['python',C:\\An\\MIRA\\Mira.py, 1+1], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['already saw that 2\\n']\n", '["near field is [[[\'1+1\', \'2\']]]\\n"]\n', "['f1 is function? Applyfunc False\\n']\n", "['supposed answer []\\n']\n"]]]
