[['FixedQualifier([delta2,\'print(\"α0\")\',TOTAL_ARGUMENT,FixedQualifiermin1])', 'fix this']]
[['TOTAL_ARGUMENT == \'print("yoikes don\\\'t worry about apostrophes if you have a good enough description")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("yoikes don\\\'t worry about apostrophes if you have a good enough description")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("yoikes don\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", '["yoikes don\'t worry about apostrophes if you have a good enough description\\n"]\n', '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("yoikes don\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfieldClone2 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("yoikes don\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '["yoikes don\'t worry about apostrophes if you have a good enough description\\n"]\n', "['already saw that 2\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("yoikes don\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("yoikes don\\\'t worry about apostrophes if you have a good enough description")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("yoikes don\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", '["yoikes don\'t worry about apostrophes if you have a good enough description\\n"]\n', "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n", "['wtf nearfieldClone2 []\\n']\n", '["yoikes don\'t worry about apostrophes if you have a good enough description\\n"]\n', "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n"]]]
[['FixedQualifier([delta2,α0print("yoikes don\\\'t worry about apostrophes if you have a good enough description")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0\\Mira.py, print("yoikes don\\\'t worry about apostrophes if you have a good enough description")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0print("yoikes don\\\'t worry about apostrophes if you have a good enough description")],α1erα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, restarting], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '["how many attempts? True [\'restarting\']\\n"]\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['Traceback (most recent call last):\\n']\n", '[\'  File "C:\\\\An\\\\MIRA\\\\Mira.py", line 53, in <module>\\n\']\n', '["    nearfield = TestCode([open(MemoryUNORDERED, \'a+\'),inputtext,nearfield,memoryLong,basisname,MemoryUNORDERED,Descent])\\n"]\n', '[\'  File "C:\\\\An\\\\MIRA\\\\MiraExternals.py", line 5349, in TestCode\\n\']\n', '[\'    internaltest2 = [["TOTAL_ARGUMENT == \\\'"+ str(inputtext) +"\\\'",[str(eval(inputtext)),""]]]\\n\']\n', '[\'  File "<string>", line 1, in <module>\\n\']\n', '["NameError: name \'restarting\' is not defined\\n"]\n']]]
[["FixedQualifier([delta2,['α0outα1stα2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,α0\\Mira.py, α1], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1outα2stα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["FixedQualifier([delta2,['pα0inα1,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, restarting], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['TOTAL_ARGUMENT == \'print("what garbage do I print")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("what garbage do I print")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("what garbage do I print")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['what garbage do I print\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("what garbage do I print")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfieldClone2 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("what garbage do I print")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['what garbage do I print\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("what garbage do I print")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("what garbage do I print")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("what garbage do I print")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['what garbage do I print\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['what garbage do I print\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n"]]]
[['FixedQualifier([delta2,[\'α0print("α1 doα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0\\Mira.py, print("α1")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2")],α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["FixedQualifier([delta2,Popen(['python',C:\\α0], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[["FixedQualifier([delta2,α0eα1['pα2inα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,[\'α0print("what garbage do I print")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,Popen([α0\\Mira.py, print("what garbage do I print")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2 doα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("what garbage do I print")],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("printing out more garbagew")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("printing out more garbagew")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("printing out more garbagew")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['printing out more garbagew\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("printing out more garbagew")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfieldClone2 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("printing out more garbagew")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['printing out more garbagew\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("printing out more garbagew")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("printing out more garbagew")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("printing out more garbagew")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['printing out more garbagew\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['printing out more garbagew\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n"]]]
[['FixedQualifier([delta2,[\'α0print("α1out α2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2out α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['pls finish\\n']\n", "['pls finish\\n']\n"]]]
[['FixedQualifier([delta2,"[\'α0print("α1")α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1outα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[[\\'FixedQualifier([delta2,"[\\\'α0print(\"\α1")],α\2",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"α0[\'α1outα2stα3",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0outα1stα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1doα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1o α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1w")α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("you will find it time after time")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("you will find it time after time")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['you will find it time after time\\n']\n", "['you will find it time after time\\n']\n"]]]
[['FixedQualifier([delta2,"[α0print(α1)\'α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("yoα1you α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[[\\'FixedQualifier([delta2,"[\\\'α0print(\"\yoα1")],α\2",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print("α1inα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[[\\'FixedQualifier([delta2,"[\\\'α0print(\"\α1")],α\2",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[[\\'FixedQualifier([delta2,"α0Popen([α1], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)α2fiα3",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print("α1fiα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1 finα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("with these wings I could fly")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("with these wings I could fly")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['with these wings I could fly\\n']\n", "['with these wings I could fly\\n']\n"]]]
[['FixedQualifier([delta2,"[\'α0print("α1hesα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[[\\'FixedQualifier([delta2,"[\\\'α0print(\"\α1")],α\2",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print(α1inα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[[\\'FixedQualifier([delta2,"α0Popen([α1], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)α2inα3",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print("wα1 I α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[[\\'FixedQualifier([delta2,"[\\\'α0print(\"\wα1")],α\2",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print("α1ingα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1 wiα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("test length of memunordered and check if input-consistency change worked")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("test length of memunordered and check if input-consistency change worked")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['test length of memunordered and check if input-consistency change worked\\n']\n", "['test length of memunordered and check if input-consistency change worked\\n']\n"]]]
[['FixedQualifier([delta2,"[\'α0print("α1erα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1 if α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[[\\'FixedQualifier([delta2,"[\\\'α0print(\"\α1")],α\2",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print(α1erα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[[\\'FixedQualifier([delta2,"α0Popen([α1], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)α2erα3",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print("α1ge α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1nd α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1th α2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("imaishi")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("imaishi")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['imaishi\\n']\n", "['imaishi\\n']\n"]]]
[[\\'FixedQualifier([delta2,"[\\\'α0print(\"\α1")],α\2",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print("α1derα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1ishα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("double check")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("double check")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['double check\\n']\n", "['double check\\n']\n"]]]
[[\\'FixedQualifier([delta2,"[\\\'α0print(\"\α1")],α\2",TOTAL_ARGUMENT,FixedQualifiermin1])\', \'\']]
[['FixedQualifier([delta2,"[\'α0print("α1ouα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,"[\'α0print("α1 checkα2",TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
