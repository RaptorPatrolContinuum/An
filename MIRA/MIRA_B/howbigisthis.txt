Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 17:26:49) [MSC v.1900 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> 
===================== RESTART: C:\An\MIRA\MIRA_B\Mira.py =====================
wtf nearfield []
how many attempts? False []
tell me encoding cp1252
exit or logout to leave 
print('resetto')
wtf nearfield2 []
wtf nearfield []
how many attempts? True ["print('resetto')"]
tell me encoding cp1252
wtf nearfield2 []
resetto
wtf nearfield3 ['[["TOTAL_ARGUMENT == \'print(\'resetto\')\'", [\'None\', \'\']]]']
wtf nearfield4 ['[["TOTAL_ARGUMENT == \'print(\'resetto\')\'", [\'None\', \'\']]]']
resetto
already saw that 2
wtf nearfield5 ['[["TOTAL_ARGUMENT == \'print(\'resetto\')\'", [\'None\', \'\']]]']
wtf nearfield3 ['[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'resetto\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'resetto\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'resetto\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'resetto\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]']
wtf nearfield4 ['[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'resetto\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'resetto\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'resetto\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'resetto\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]']
wtf nearfield []
how many attempts? True ["print('resetto')"]
tell me encoding cp1252
wtf nearfield2 []
resetto
already saw that 2
wtf nearfield3 []
wtf nearfield4 []
resetto
already saw that 2
wtf nearfield5 []
wtf nearfield5 ['[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'resetto\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'resetto\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'resetto\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'resetto\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]', '[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'resetto\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'resetto\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'resetto\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield3 []\\\\n\']\\n", "[\'wtf nearfield4 []\\\\n\']\\n", "[\'resetto\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield5 []\\\\n\']\\n"]]]']
WTF nearfield7 ['[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'resetto\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'resetto\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'resetto\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'resetto\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'resetto\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]', '[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'resetto\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'resetto\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'resetto\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield3 []\\\\n\']\\n", "[\'wtf nearfield4 []\\\\n\']\\n", "[\'resetto\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield5 []\\\\n\']\\n"]]]']
dogshit3 [[['α0'], ['α0']], [["print('')"], ["print('')"]]]
x in nearfield [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
fcheck True
fcheck2 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
hey hey hey <class 'str'>
WHO IS SAYING THIS? False
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)' == 'print('yoikes')'
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)" == 'print('yoikes')'
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,[Î±0print('yoikes')],'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,[Î±0print('yoikes')],"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Popen(['python',C:\Î±0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Popen(['python',C:\Î±0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Î±0([Î±1print('yoikes')],Î±2erÎ±3,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Î±0([Î±1print('yoikes')],Î±2erÎ±3,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)' == 'print('cmonBrug')'
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)" == 'print('cmonBrug')'
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,[Î±0print('Î±1')Î±2,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,[Î±0print('Î±1')Î±2,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Popen(['python',C:\Î±0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Popen(['python',C:\Î±0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Î±0([Î±1print('Î±2')],Î±3,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Î±0([Î±1print('Î±2')],Î±3,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,[Î±0print('cmonBrug')],'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,[Î±0print('cmonBrug')],"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Popen(['python',C:\Î±0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Popen(['python',C:\Î±0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Î±0([Î±1print('Î±2')Î±3,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Î±0([Î±1print('Î±2')Î±3,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Î±0([Î±1print('cmonBrug')],Î±2erÎ±3,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Î±0([Î±1print('cmonBrug')],Î±2erÎ±3,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)' == 'print('resetto')'
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)" == 'print('resetto')'
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)' == 'print(f)'
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)" == 'print(f)'
False
supposed answer []
COMPART MEMCOMPOSE WITH GUESSABST
MEMCOMPOSE [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')"], ["print('resetto')"]], [[']'], [']']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [["'"], ["'"]], [['α1'], ['α1']]]]
guessAbst [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
double check dict {'0': [], '1': [], '2': [], '3': [], '4': [], '5': [], '6': []}
check lengths 7 7
what is anothersum? 7
totalcheck 49
x in totalabstractions 0
lens 7 7
lensint 0 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 1
lens 7 7
lensint 1 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 2
lens 7 7
lensint 2 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 3
lens 7 7
lensint 3 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 4
lens 7 7
lensint 4 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 5
lens 7 7
lensint 5 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 6
lens 7 7
lensint 6 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 7
lens 7 7
lensint 0 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 8
lens 7 7
lensint 1 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 9
lens 7 7
lensint 2 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 10
lens 7 7
lensint 3 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 11
lens 7 7
lensint 4 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 12
lens 7 7
lensint 5 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 13
lens 7 7
lensint 6 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 14
lens 7 7
lensint 0 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 15
lens 7 7
lensint 1 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 16
lens 7 7
lensint 2 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 17
lens 7 7
lensint 3 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 18
lens 7 7
lensint 4 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 19
lens 7 7
lensint 5 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 20
lens 7 7
lensint 6 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 21
lens 7 7
lensint 0 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 22
lens 7 7
lensint 1 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 23
lens 7 7
lensint 2 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 24
lens 7 7
lensint 3 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 25
lens 7 7
lensint 4 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 26
lens 7 7
lensint 5 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 27
lens 7 7
lensint 6 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 28
lens 7 7
lensint 0 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 29
lens 7 7
lensint 1 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 30
lens 7 7
lensint 2 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 31
lens 7 7
lensint 3 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 32
lens 7 7
lensint 4 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 33
lens 7 7
lensint 5 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 34
lens 7 7
lensint 6 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 35
lens 7 7
lensint 0 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 36
lens 7 7
lensint 1 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 37
lens 7 7
lensint 2 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 38
lens 7 7
lensint 3 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 39
lens 7 7
lensint 4 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 40
lens 7 7
lensint 5 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 41
lens 7 7
lensint 6 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 42
lens 7 7
lensint 0 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 43
lens 7 7
lensint 1 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 44
lens 7 7
lensint 2 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 45
lens 7 7
lensint 3 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 46
lens 7 7
lensint 4 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 47
lens 7 7
lensint 5 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 48
lens 7 7
lensint 6 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
NOW TO CROSS WITH MEMORY
WTRFFFFF 931
skipfactor 49
OK WE ARE COMPARING  0 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  1 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  2 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  3 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  4 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  5 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  6 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  7 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  8 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  9 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  10 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  11 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  12 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  13 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  14 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  15 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  16 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  17 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  18 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  19 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  20 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  21 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  22 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  23 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  24 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  25 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  26 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  27 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  28 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  29 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  30 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  31 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  32 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  33 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  34 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  35 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  36 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  37 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  38 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  39 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  40 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  41 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  42 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  43 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  44 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  45 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  46 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  47 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  48 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2edα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  49 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  50 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  51 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  52 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  53 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  54 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  55 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  56 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  57 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  58 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  59 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  60 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  61 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  62 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  63 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  64 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  65 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  66 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  67 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  68 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  69 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  70 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  71 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  72 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  73 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  74 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  75 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  76 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  77 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  78 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  79 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  80 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  81 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  82 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  83 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  84 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  85 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  86 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  87 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  88 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  89 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  90 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  91 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  92 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  93 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  94 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  95 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  96 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  97 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2edα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  98 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  99 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  100 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  101 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  102 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  103 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  104 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  105 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  106 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  107 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  108 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  109 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  110 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  111 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  112 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  113 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  114 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  115 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  116 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  117 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  118 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  119 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  120 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  121 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  122 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  123 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  124 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  125 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  126 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  127 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  128 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  129 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  130 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  131 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  132 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  133 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  134 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  135 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  136 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  137 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  138 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  139 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  140 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  141 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  142 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  143 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  144 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  145 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  146 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2edα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  147 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  148 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  149 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  150 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  151 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  152 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  153 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  154 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  155 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  156 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  157 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  158 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  159 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  160 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  161 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  162 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  163 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  164 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  165 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  166 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  167 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  168 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  169 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  170 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  171 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  172 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  173 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  174 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  175 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  176 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  177 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  178 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  179 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  180 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  181 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  182 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  183 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  184 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  185 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  186 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  187 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  188 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  189 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  190 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  191 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  192 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  193 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  194 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  195 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  196 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  197 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  198 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  199 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  200 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  201 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  202 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  203 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  204 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  205 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  206 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  207 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  208 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  209 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  210 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  211 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  212 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  213 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  214 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  215 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  216 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  217 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  218 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  219 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  220 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  221 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  222 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  223 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  224 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  225 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  226 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  227 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  228 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  229 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  230 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  231 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  232 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  233 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  234 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  235 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  236 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  237 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  238 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  239 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  240 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  241 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  242 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  243 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  244 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  245 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  246 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  247 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  248 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  249 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  250 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  251 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  252 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  253 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  254 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  255 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  256 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  257 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  258 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  259 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  260 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  261 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  262 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  263 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  264 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  265 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  266 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  267 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  268 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  269 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  270 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  271 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  272 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  273 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  274 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  275 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  276 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  277 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  278 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  279 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  280 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  281 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  282 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  283 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  284 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  285 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  286 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  287 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  288 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  289 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  290 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  291 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  292 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  293 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  294 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  295 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  296 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  297 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  298 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  299 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  300 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  301 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  302 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  303 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  304 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  305 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  306 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  307 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  308 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  309 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  310 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  311 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  312 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  313 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  314 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  315 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  316 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  317 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  318 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  319 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  320 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  321 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  322 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  323 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  324 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  325 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  326 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  327 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  328 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  329 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  330 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  331 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  332 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  333 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  334 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  335 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  336 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  337 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  338 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  339 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  340 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  341 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  342 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2edα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  343 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  344 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  345 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  346 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  347 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  348 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  349 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  350 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  351 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  352 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  353 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  354 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  355 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  356 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  357 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  358 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  359 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  360 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  361 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  362 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  363 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  364 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  365 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  366 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  367 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  368 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  369 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  370 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  371 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  372 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  373 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  374 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  375 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  376 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  377 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  378 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  379 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  380 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  381 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  382 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  383 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  384 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  385 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  386 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  387 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  388 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  389 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  390 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  391 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2edα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  392 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  393 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  394 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  395 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  396 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  397 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  398 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  399 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  400 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  401 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  402 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  403 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  404 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  405 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  406 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  407 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  408 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  409 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  410 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  411 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  412 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  413 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  414 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  415 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  416 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  417 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  418 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  419 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  420 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  421 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  422 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  423 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  424 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  425 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  426 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  427 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  428 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  429 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  430 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  431 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  432 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  433 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  434 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  435 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  436 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  437 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  438 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  439 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  440 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2edα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  441 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  442 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  443 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  444 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  445 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  446 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  447 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  448 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  449 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  450 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  451 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  452 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  453 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  454 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  455 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  456 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  457 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  458 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  459 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  460 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  461 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  462 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  463 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  464 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  465 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  466 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  467 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  468 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  469 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  470 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  471 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  472 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  473 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  474 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  475 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  476 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  477 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  478 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  479 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  480 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  481 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  482 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  483 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  484 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  485 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  486 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  487 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  488 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  489 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  490 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  491 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  492 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  493 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  494 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  495 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  496 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  497 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  498 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  499 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  500 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  501 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  502 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  503 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  504 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  505 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  506 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  507 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  508 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  509 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  510 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  511 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  512 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  513 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  514 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  515 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  516 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  517 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  518 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  519 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  520 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  521 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  522 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  523 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  524 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  525 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  526 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  527 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  528 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  529 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  530 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  531 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  532 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  533 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  534 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  535 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  536 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  537 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  538 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  539 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  540 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  541 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  542 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  543 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  544 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  545 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  546 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  547 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  548 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  549 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  550 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  551 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  552 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  553 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  554 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  555 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  556 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  557 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  558 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  559 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  560 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  561 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  562 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  563 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  564 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  565 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  566 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  567 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  568 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  569 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  570 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  571 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  572 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  573 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  574 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  575 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  576 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  577 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  578 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  579 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  580 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  581 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  582 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  583 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  584 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  585 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  586 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  587 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  588 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  589 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  590 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  591 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  592 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  593 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  594 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  595 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  596 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  597 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  598 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  599 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  600 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  601 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  602 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  603 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  604 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  605 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  606 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  607 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  608 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  609 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  610 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  611 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  612 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  613 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  614 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  615 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  616 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  617 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  618 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  619 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  620 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  621 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  622 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  623 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  624 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  625 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  626 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  627 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  628 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  629 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  630 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  631 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  632 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  633 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  634 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  635 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  636 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  637 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  638 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  639 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  640 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  641 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  642 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  643 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  644 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  645 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  646 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  647 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  648 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  649 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  650 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  651 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  652 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  653 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  654 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  655 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  656 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  657 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  658 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  659 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  660 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  661 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  662 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  663 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  664 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  665 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  666 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  667 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  668 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  669 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  670 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  671 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  672 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  673 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  674 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  675 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  676 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  677 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  678 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  679 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  680 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  681 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  682 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  683 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  684 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  685 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  686 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  687 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  688 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  689 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  690 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  691 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  692 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  693 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  694 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  695 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  696 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  697 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  698 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  699 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  700 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  701 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  702 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  703 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  704 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  705 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  706 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  707 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  708 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  709 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  710 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  711 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  712 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  713 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  714 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  715 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  716 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  717 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  718 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  719 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  720 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  721 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  722 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  723 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  724 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  725 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  726 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  727 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  728 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  729 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  730 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  731 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  732 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  733 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  734 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  735 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  736 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  737 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  738 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  739 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  740 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  741 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  742 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  743 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  744 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  745 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  746 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  747 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  748 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  749 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  750 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  751 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  752 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  753 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  754 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  755 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  756 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  757 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  758 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  759 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  760 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  761 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  762 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  763 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  764 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  765 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  766 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  767 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  768 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  769 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  770 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  771 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  772 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  773 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  774 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  775 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  776 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  777 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  778 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  779 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  780 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  781 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  782 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  783 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2edα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  784 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  785 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  786 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  787 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  788 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  789 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  790 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  791 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  792 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  793 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  794 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  795 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  796 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  797 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  798 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  799 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  800 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  801 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  802 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  803 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  804 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  805 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  806 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  807 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  808 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  809 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  810 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  811 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  812 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  813 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  814 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  815 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  816 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  817 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  818 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  819 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  820 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  821 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  822 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  823 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  824 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  825 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  826 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  827 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  828 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  829 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  830 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  831 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  832 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2edα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  833 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  834 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  835 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  836 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  837 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  838 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  839 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  840 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  841 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  842 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  843 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  844 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  845 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  846 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  847 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  848 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  849 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  850 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  851 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  852 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  853 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  854 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  855 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  856 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  857 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  858 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  859 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  860 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  861 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  862 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  863 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  864 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  865 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  866 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  867 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  868 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  869 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  870 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  871 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  872 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  873 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  874 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  875 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  876 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  877 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  878 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  879 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  880 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  881 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2edα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  882 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  883 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  884 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  885 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  886 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  887 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  888 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  889 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  890 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  891 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  892 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  893 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  894 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  895 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  896 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  897 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  898 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 16 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  899 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 17 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  900 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 18 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  901 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 19 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  902 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 20 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  903 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 21 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  904 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 22 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  905 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 23 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  906 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 24 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  907 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 25 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  908 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 26 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  909 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 27 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  910 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 28 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  911 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 29 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  912 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 30 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  913 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 31 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  914 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  915 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  916 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  917 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  918 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 36 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  919 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 37 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  920 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 38 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  921 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 39 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  922 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 40 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  923 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 41 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  924 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 42 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  925 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 43 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  926 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 44 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  927 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 45 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  928 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 46 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  929 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 47 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  930 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 48 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [['ed'], ['ed']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2edα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
STARTHERE
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
α0([α1print('α2edα3

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
['α0print(α1 stα2

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
α0([α1print(α2edα3

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
α0([α1print(α2)],α3

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
['α0print(α1edα2

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0([α1)],α2erα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
α0eα1([α2inα3

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
[α0print('redline')]

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('redline')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print(α2 stα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
α0([α1print('redline')],α2erα3

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
ENDHERE
x in nearfield [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
fcheck True
fcheck2 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
hey hey hey <class 'str'>
WHO IS SAYING THIS? False
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)' == 'print('yoikes')'
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)" == 'print('yoikes')'
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,[Î±0print('yoikes')],'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,[Î±0print('yoikes')],"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Popen(['python',C:\Î±0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Popen(['python',C:\Î±0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Î±0([Î±1print('yoikes')],Î±2erÎ±3,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Î±0([Î±1print('yoikes')],Î±2erÎ±3,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)' == 'print('cmonBrug')'
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)" == 'print('cmonBrug')'
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,[Î±0print('Î±1')Î±2,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,[Î±0print('Î±1')Î±2,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Popen(['python',C:\Î±0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Popen(['python',C:\Î±0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Î±0([Î±1print('Î±2')],Î±3,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Î±0([Î±1print('Î±2')],Î±3,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,[Î±0print('cmonBrug')],'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,[Î±0print('cmonBrug')],"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Popen(['python',C:\Î±0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Popen(['python',C:\Î±0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Î±0([Î±1print('Î±2')Î±3,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Î±0([Î±1print('Î±2')Î±3,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
FixedQualifier([delta2,Î±0([Î±1print('cmonBrug')],Î±2erÎ±3,'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)',FixedQualifiermin1])
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
FixedQualifier([delta2,Î±0([Î±1print('cmonBrug')],Î±2erÎ±3,"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)",FixedQualifiermin1])
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)' == 'print('resetto')'
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)" == 'print('resetto')'
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
test TOTAL 'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'
TRY REPLACEMENT NOW1
'Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)' == 'print(f)'
test TOTAL "Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"
TRY REPLACEMENT NOW2
"Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)" == 'print(f)'
False
supposed answer []
COMPART MEMCOMPOSE WITH GUESSABST
MEMCOMPOSE [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')"], ["print('resetto')"]], [[']'], [']']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [["'"], ["'"]], [['α1'], ['α1']]]]
guessAbst [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
double check dict {'0': [], '1': [], '2': [], '3': [], '4': [], '5': [], '6': []}
check lengths 7 7
what is anothersum? 7
totalcheck 49
x in totalabstractions 0
lens 7 7
lensint 0 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 1
lens 7 7
lensint 1 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 2
lens 7 7
lensint 2 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 3
lens 7 7
lensint 3 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 4
lens 7 7
lensint 4 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 5
lens 7 7
lensint 5 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 6
lens 7 7
lensint 6 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
x in totalabstractions 7
lens 7 7
lensint 0 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 8
lens 7 7
lensint 1 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 9
lens 7 7
lensint 2 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 10
lens 7 7
lensint 3 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 11
lens 7 7
lensint 4 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 12
lens 7 7
lensint 5 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 13
lens 7 7
lensint 6 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 14
lens 7 7
lensint 0 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 15
lens 7 7
lensint 1 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 16
lens 7 7
lensint 2 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 17
lens 7 7
lensint 3 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 18
lens 7 7
lensint 4 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 19
lens 7 7
lensint 5 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 20
lens 7 7
lensint 6 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
x in totalabstractions 21
lens 7 7
lensint 0 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 22
lens 7 7
lensint 1 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 23
lens 7 7
lensint 2 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 24
lens 7 7
lensint 3 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 25
lens 7 7
lensint 4 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 26
lens 7 7
lensint 5 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 27
lens 7 7
lensint 6 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
x in totalabstractions 28
lens 7 7
lensint 0 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 29
lens 7 7
lensint 1 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 30
lens 7 7
lensint 2 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 31
lens 7 7
lensint 3 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 32
lens 7 7
lensint 4 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 33
lens 7 7
lensint 5 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 34
lens 7 7
lensint 6 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
x in totalabstractions 35
lens 7 7
lensint 0 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 36
lens 7 7
lensint 1 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 37
lens 7 7
lensint 2 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 38
lens 7 7
lensint 3 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 39
lens 7 7
lensint 4 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 40
lens 7 7
lensint 5 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 41
lens 7 7
lensint 6 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
x in totalabstractions 42
lens 7 7
lensint 0 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 43
lens 7 7
lensint 1 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 44
lens 7 7
lensint 2 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 45
lens 7 7
lensint 3 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 46
lens 7 7
lensint 4 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 47
lens 7 7
lensint 5 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 48
lens 7 7
lensint 6 6 0
the guy is empty []
length of this guy 0
len2int 6
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], [[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
NOW TO CROSS WITH MEMORY
WTRFFFFF 931
skipfactor 49
OK WE ARE COMPARING  0 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  1 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  2 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  3 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  4 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  5 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  6 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  7 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  8 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  9 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  10 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  11 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  12 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  13 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  14 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  15 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  16 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  17 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  18 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  19 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  20 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  21 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  22 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  23 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  24 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  25 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  26 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  27 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  28 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  29 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  30 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  31 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  32 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  33 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  34 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  35 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  36 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  37 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  38 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  39 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  40 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  41 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  42 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  43 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  44 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  45 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  46 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  47 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  48 [["TOTAL_ARGUMENT == 'print('yoikes')'", ['None', '']]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('yoikes')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  49 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  50 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  51 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  52 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  53 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  54 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  55 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  56 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  57 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  58 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  59 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  60 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  61 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  62 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  63 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  64 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  65 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  66 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  67 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  68 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  69 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  70 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  71 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  72 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  73 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  74 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  75 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  76 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  77 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  78 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  79 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  80 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  81 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  82 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  83 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  84 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  85 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  86 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  87 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  88 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  89 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  90 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  91 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  92 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  93 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  94 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  95 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  96 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  97 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['yoikes\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'yoikes\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  98 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  99 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  100 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  101 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  102 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  103 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  104 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  105 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  106 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  107 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  108 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  109 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  110 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  111 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  112 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  113 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  114 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  115 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  116 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  117 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  118 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  119 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  120 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  121 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  122 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  123 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  124 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  125 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  126 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  127 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  128 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  129 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  130 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  131 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  132 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  133 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  134 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  135 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  136 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  137 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  138 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  139 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  140 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  141 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  142 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  143 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  144 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  145 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  146 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'yoikes\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['yoikes\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  147 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  148 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  149 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  150 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  151 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  152 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  153 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  154 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  155 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  156 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  157 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  158 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  159 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  160 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  161 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  162 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  163 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  164 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  165 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  166 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  167 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  168 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  169 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  170 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  171 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  172 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  173 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  174 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  175 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  176 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  177 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  178 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  179 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  180 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  181 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  182 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  183 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  184 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  185 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  186 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  187 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  188 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  189 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  190 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  191 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  192 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  193 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  194 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  195 [["FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('yoikes')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  196 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  197 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  198 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  199 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  200 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  201 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  202 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  203 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  204 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  205 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  206 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  207 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  208 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  209 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  210 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  211 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  212 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  213 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  214 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  215 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  216 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  217 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  218 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  219 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  220 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  221 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  222 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  223 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  224 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  225 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  226 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  227 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  228 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  229 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  230 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  231 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  232 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  233 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  234 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  235 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  236 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  237 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  238 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  239 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  240 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  241 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  242 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  243 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  244 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('yoikes')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  245 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  246 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  247 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  248 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  249 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  250 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  251 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  252 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  253 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  254 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  255 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  256 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  257 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  258 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  259 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  260 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  261 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  262 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  263 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  264 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  265 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  266 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  267 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  268 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  269 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  270 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  271 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  272 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  273 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  274 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  275 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  276 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  277 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  278 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  279 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  280 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  281 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  282 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  283 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  284 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  285 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  286 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  287 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  288 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  289 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  290 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  291 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  292 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  293 [["FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('yoikes')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  294 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  295 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  296 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  297 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  298 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  299 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  300 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  301 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  302 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  303 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  304 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  305 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  306 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  307 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  308 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  309 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  310 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  311 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  312 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  313 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  314 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  315 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  316 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  317 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  318 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  319 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  320 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  321 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  322 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  323 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  324 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  325 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  326 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  327 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  328 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  329 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  330 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  331 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  332 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  333 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  334 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  335 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  336 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  337 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  338 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  339 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  340 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  341 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  342 [["TOTAL_ARGUMENT == 'print('cmonBrug')'", ['None', '']]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('cmonBrug')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  343 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  344 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  345 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  346 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  347 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  348 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  349 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  350 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  351 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  352 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  353 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  354 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  355 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  356 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  357 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  358 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  359 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  360 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  361 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  362 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  363 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  364 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  365 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  366 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  367 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  368 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  369 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  370 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  371 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  372 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  373 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  374 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  375 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  376 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  377 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  378 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  379 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  380 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  381 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  382 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  383 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  384 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  385 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  386 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  387 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  388 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  389 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  390 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  391 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'cmonBrug\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  392 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  393 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  394 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  395 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  396 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  397 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  398 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  399 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  400 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  401 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  402 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  403 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  404 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  405 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  406 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  407 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  408 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  409 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  410 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  411 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  412 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  413 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  414 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  415 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  416 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  417 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  418 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  419 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  420 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  421 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  422 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  423 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  424 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  425 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  426 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  427 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  428 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  429 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  430 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  431 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  432 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  433 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  434 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  435 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  436 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  437 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  438 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  439 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  440 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'cmonBrug\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['cmonBrug\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  441 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  442 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  443 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  444 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  445 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  446 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  447 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  448 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  449 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  450 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  451 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  452 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  453 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  454 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  455 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  456 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  457 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  458 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  459 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  460 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  461 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  462 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  463 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  464 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  465 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  466 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  467 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  468 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS True
RHSpart1  
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  469 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  470 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  471 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  472 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  473 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  474 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  475 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  476 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  477 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  478 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  479 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  480 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  481 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  482 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  483 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  484 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  485 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  486 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  487 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  488 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  489 [["FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('α1')α2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  490 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  491 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  492 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  493 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  494 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  495 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  496 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  497 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  498 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  499 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  500 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  501 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  502 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  503 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  504 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  505 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  506 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  507 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  508 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  509 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  510 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  511 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  512 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  513 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  514 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  515 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  516 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  517 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  518 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  519 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  520 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  521 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  522 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  523 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  524 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  525 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  526 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  527 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  528 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  529 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  530 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  531 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  532 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  533 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  534 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  535 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  536 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  537 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  538 [["FixedQualifier([delta2,Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  539 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  540 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  541 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  542 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  543 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  544 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  545 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  546 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  547 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  548 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  549 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  550 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  551 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  552 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  553 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  554 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  555 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  556 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  557 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  558 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  559 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  560 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  561 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  562 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  563 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  564 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  565 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  566 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  567 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  568 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  569 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  570 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  571 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  572 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  573 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  574 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  575 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  576 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  577 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  578 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  579 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  580 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  581 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  582 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  583 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  584 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  585 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  586 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  587 [["FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')],α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  588 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  589 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  590 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  591 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  592 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  593 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  594 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  595 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  596 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  597 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  598 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  599 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  600 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  601 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  602 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  603 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  604 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  605 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  606 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  607 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  608 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  609 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  610 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  611 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  612 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  613 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  614 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  615 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  616 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  617 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  618 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  619 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  620 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  621 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  622 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  623 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  624 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  625 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  626 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  627 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  628 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  629 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  630 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  631 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  632 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  633 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  634 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  635 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  636 [["FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,[α0print('cmonBrug')],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  637 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  638 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  639 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  640 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  641 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  642 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  643 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  644 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  645 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  646 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  647 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  648 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  649 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  650 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  651 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  652 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  653 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  654 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  655 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  656 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  657 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  658 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  659 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  660 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  661 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  662 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  663 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  664 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  665 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  666 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  667 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  668 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  669 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  670 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  671 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  672 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  673 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  674 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  675 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  676 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  677 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  678 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  679 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  680 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  681 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  682 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  683 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  684 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  685 [["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0\Mira.py, print('cmonBrug')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  686 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  687 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  688 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  689 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  690 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  691 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  692 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  693 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  694 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  695 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  696 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  697 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  698 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  699 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  700 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  701 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  702 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  703 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  704 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  705 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  706 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  707 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  708 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  709 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  710 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  711 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  712 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  713 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  714 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  715 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  716 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  717 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  718 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  719 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  720 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS True
RHSpart1  
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  721 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  722 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  723 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  724 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  725 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  726 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  727 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  728 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  729 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  730 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  731 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  732 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  733 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  734 [["FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('α2')α3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  735 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  736 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  737 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  738 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  739 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  740 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  741 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1esα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  742 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  743 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  744 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  745 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  746 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  747 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  748 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  749 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  750 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  751 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  752 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  753 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  754 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  755 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')],α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  756 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  757 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  758 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  759 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  760 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  761 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  762 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('α1')α2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  763 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  764 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  765 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  766 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  767 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  768 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  769 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print('α2')α3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  770 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  771 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  772 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  773 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  774 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  775 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  776 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) [α0print('resetto')]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  777 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  778 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  779 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  780 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  781 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  782 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  783 [["FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,α0([α1print('cmonBrug')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  784 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  785 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  786 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  787 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  788 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  789 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  790 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1esα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  791 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  792 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  793 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  794 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  795 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  796 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  797 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  798 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  799 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  800 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  801 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  802 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  803 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  804 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')],α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  805 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  806 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  807 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  808 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  809 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  810 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  811 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('α1')α2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  812 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  813 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  814 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  815 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  816 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  817 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  818 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' α0([α1print('α2')α3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  819 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  820 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  821 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  822 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  823 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  824 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  825 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' [α0print('resetto')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  826 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  827 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  828 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  829 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  830 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  831 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  832 [["TOTAL_ARGUMENT == 'print('resetto')'", ['None', '']]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('resetto')' Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  833 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  834 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  835 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  836 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  837 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  838 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  839 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  840 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  841 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  842 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  843 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  844 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  845 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  846 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  847 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  848 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  849 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  850 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  851 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  852 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  853 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  854 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  855 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  856 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  857 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  858 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  859 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  860 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  861 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  862 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  863 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  864 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  865 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  866 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  867 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  868 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  869 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  870 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  871 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  872 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  873 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  874 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  875 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  876 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  877 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  878 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  879 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  880 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  881 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['resetto\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'resetto\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  882 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  883 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  884 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  885 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  886 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  887 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  888 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1esα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1esα2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['es'], ['es']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  889 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  890 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  891 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  892 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  893 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  894 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  895 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  896 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  897 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  898 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 16 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  899 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 17 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  900 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 18 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  901 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 19 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  902 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 20 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')],α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')],α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')],"], ["')],"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  903 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 21 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  904 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 22 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  905 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 23 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  906 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 24 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  907 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 25 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  908 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 26 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  909 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 27 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1')α2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('α1')α2", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [["')"], ["')"]], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  910 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  911 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  912 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  913 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  914 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  915 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  916 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print('α2')α3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["α0([α1print('α2')α3", '']]
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [["print('"], ["print('"]], [['α2'], ['α2']], [["')"], ["')"]], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  917 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 35 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  918 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 36 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  919 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 37 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  920 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 38 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  921 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 39 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  922 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 40 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  923 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 41 [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('resetto')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["[α0print('resetto')]", '']]
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('resetto')]"], ["print('resetto')]"]]], '']]
OK WE ARE COMPARING  924 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 42 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  925 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 43 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  926 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 44 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  927 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 45 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  928 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 46 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  929 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 47 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  930 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 48 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'resetto\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['resetto\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed [["Popen(['python',C:\\α0\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']]
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
STARTHERE
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
[α0print('α1esα2

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
α0([α1print('α2')],α3

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
[α0print('α1')α2

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
α0([α1print('α2')α3

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
[α0print('resetto')]

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('resetto')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
ENDHERE
wtf nearfield []
how many attempts? False []
tell me encoding cp1252
exit or logout to leave 
