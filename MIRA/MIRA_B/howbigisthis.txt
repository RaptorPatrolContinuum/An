Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 17:26:49) [MSC v.1900 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> 
===================== RESTART: C:\An\MIRA\MIRA_B\Mira.py =====================
wtf nearfield []
how many attempts? False []
tell me encoding cp1252
exit or logout to leave 
print('the line')
wtf nearfield2 []
wtf nearfield []
how many attempts? True ["print('the line')"]
tell me encoding cp1252
wtf nearfield2 []
the line
wtf nearfield3 ['[["TOTAL_ARGUMENT == \'print(\'the line\')\'", [\'None\', \'\']]]']
wtf nearfield4 ['[["TOTAL_ARGUMENT == \'print(\'the line\')\'", [\'None\', \'\']]]']
the line
already saw that 2
wtf nearfield5 ['[["TOTAL_ARGUMENT == \'print(\'the line\')\'", [\'None\', \'\']]]']
wtf nearfield3 ['[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'the line\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'the line\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'the line\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]']
wtf nearfield4 ['[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'the line\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'the line\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'the line\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]']
wtf nearfield []
how many attempts? True ["print('the line')"]
tell me encoding cp1252
wtf nearfield2 []
the line
already saw that 2
wtf nearfield3 []
wtf nearfield4 []
the line
already saw that 2
wtf nearfield5 []
wtf nearfield5 ['[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'the line\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'the line\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'the line\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]', '[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'the line\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'the line\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield3 []\\\\n\']\\n", "[\'wtf nearfield4 []\\\\n\']\\n", "[\'the line\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield5 []\\\\n\']\\n"]]]']
WTF nearfield7 ['[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'the line\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'the line\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'the line\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[["TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print(\\\\\\\\\\\\\\\'the line\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\'", [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]', '[["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True ["print(\\\\\\\'the line\\\\\\\')"]\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'the line\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield3 []\\\\n\']\\n", "[\'wtf nearfield4 []\\\\n\']\\n", "[\'the line\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield5 []\\\\n\']\\n"]]]']
dogshit3 [[['α0'], ['α0']], [["print('')"], ["print('')"]]]
x in nearfield [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
fcheck True
fcheck2 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
hey hey hey <class 'str'>
WHO IS SAYING THIS? False
supposed answer []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print('dont force errors')'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print('dont force errors')'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(\'dont force errors\')\'"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
append ? True
DONT STOP MODORENA FLASHBACK ['["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'dont force errors\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print('the line')'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print('the line')'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(\'the line\')\'"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
append ? True
DONT STOP MODORENA FLASHBACK ['["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
append ? False
am I getting error here? [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
SEEKFORCE ARGLIST ['Memory.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print(f)'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print(f)'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [["'"], ["'"]], [['α1'], ['α1']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(f)\'"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [["'"], ["'"]], [['α1'], ['α1']]]
am I getting error here? [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [["'"], ["'"]], [['α1'], ['α1']]]]
COMPART MEMCOMPOSE WITH GUESSABST
MEMCOMPOSE b'[[[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [["print(\'"], ["print(\'"]], [[\'\xce\xb11\'], [\'\xce\xb11\']], [[\'err\'], [\'err\']], [[\'\xce\xb12\'], [\'\xce\xb12\']]], [[["Popen([\'python\',C:\\\\"], ["Popen([\'python\',C:\\\\"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [["\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [["print(\'the line\')"], ["print(\'the line\')"]], [[\']\'], [\']\']]], [[["Popen([\'python\',C:\\\\"], ["Popen([\'python\',C:\\\\"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [["\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print(\'], [\'print(\']], [["\'"], ["\'"]], [[\'\xce\xb11\'], [\'\xce\xb11\']]]]'
guessAbst [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
double check dict {'0': [], '1': [], '2': [], '3': []}
check lengths 4 4
what is anothersum? 4
totalcheck 16
x in totalabstractions 0
lens 4 4
lensint 0 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
x in totalabstractions 1
lens 4 4
lensint 1 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
x in totalabstractions 2
lens 4 4
lensint 2 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
x in totalabstractions 3
lens 4 4
lensint 3 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
x in totalabstractions 4
lens 4 4
lensint 0 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 5
lens 4 4
lensint 1 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 6
lens 4 4
lensint 2 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 7
lens 4 4
lensint 3 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 8
lens 4 4
lensint 0 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
x in totalabstractions 9
lens 4 4
lensint 1 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
x in totalabstractions 10
lens 4 4
lensint 2 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
x in totalabstractions 11
lens 4 4
lensint 3 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
x in totalabstractions 12
lens 4 4
lensint 0 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 13
lens 4 4
lensint 1 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 14
lens 4 4
lensint 2 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 15
lens 4 4
lensint 3 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
NOW TO CROSS WITH MEMORY
WTRFFFFF 96
skipfactor 16
OK WE ARE COMPARING  0 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  1 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  2 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  4 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  5 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  6 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  7 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  8 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  9 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  10 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  11 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  12 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  13 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  14 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  15 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  16 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  17 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  18 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  19 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  20 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  21 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  22 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  23 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  24 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  25 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  26 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  27 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  28 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  29 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  30 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  31 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  32 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  33 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  34 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  35 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  36 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  37 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  38 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  39 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  40 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  41 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  42 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  43 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  44 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  45 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  46 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  47 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  48 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  49 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  50 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  51 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  52 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  53 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  54 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  55 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  56 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  57 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  58 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  59 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  60 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  61 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  62 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  63 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  64 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  65 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  66 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  67 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  68 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  69 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  70 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  71 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  72 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  73 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  74 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  75 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  76 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  77 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  78 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  79 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  80 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  81 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  82 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  83 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  84 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  85 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  86 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  87 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  88 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  89 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  90 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  91 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  92 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  93 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  94 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  95 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
STARTHERE
[α0print('α1errα2

=
[α0print('α1errα2

=
[α0print('α1errα2

=
[α0print('α1errα2

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
[α0print('the line')]

=
[α0print('the line')]

=
[α0print('the line')]

=
[α0print('the line')]

=
Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
ENDHERE
x in nearfield [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
fcheck True
fcheck2 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
hey hey hey <class 'str'>
WHO IS SAYING THIS? False
supposed answer []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print('dont force errors')'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print('dont force errors')'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(\'dont force errors\')\'"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
append ? True
DONT STOP MODORENA FLASHBACK ['["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'dont force errors\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print('the line')'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print('the line')'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(\'the line\')\'"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
append ? True
DONT STOP MODORENA FLASHBACK ['["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
monkaS argList ['MemoryUNORDERED.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
append ? False
am I getting error here? [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')"], ["print('the line')"]], [[']'], [']']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
SEEKFORCE ARGLIST ['Memory.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", <function delta2 at 0x03A930C0>, <function SeekForcemin1 at 0x03A933D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print(f)'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print(f)'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [["'"], ["'"]], [['α1'], ['α1']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(f)\'"]', "Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
HYPERS [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [["'"], ["'"]], [['α1'], ['α1']]]
am I getting error here? [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [["'"], ["'"]], [['α1'], ['α1']]]]
COMPART MEMCOMPOSE WITH GUESSABST
MEMCOMPOSE b'[[[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [["print(\'"], ["print(\'"]], [[\'\xce\xb11\'], [\'\xce\xb11\']], [[\'err\'], [\'err\']], [[\'\xce\xb12\'], [\'\xce\xb12\']]], [[["Popen([\'python\',C:\\\\"], ["Popen([\'python\',C:\\\\"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [["\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [["print(\'the line\')"], ["print(\'the line\')"]], [[\']\'], [\']\']]], [[["Popen([\'python\',C:\\\\"], ["Popen([\'python\',C:\\\\"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [["\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\\\Mira.py, print(\'the line\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print(\'], [\'print(\']], [["\'"], ["\'"]], [[\'\xce\xb11\'], [\'\xce\xb11\']]]]'
guessAbst [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], <function SeekForcemin2 at 0x03A93420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
double check dict {'0': [], '1': [], '2': [], '3': []}
check lengths 4 4
what is anothersum? 4
totalcheck 16
x in totalabstractions 0
lens 4 4
lensint 0 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
x in totalabstractions 1
lens 4 4
lensint 1 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
x in totalabstractions 2
lens 4 4
lensint 2 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
x in totalabstractions 3
lens 4 4
lensint 3 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
x in totalabstractions 4
lens 4 4
lensint 0 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 5
lens 4 4
lensint 1 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 6
lens 4 4
lensint 2 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 7
lens 4 4
lensint 3 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 8
lens 4 4
lensint 0 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
x in totalabstractions 9
lens 4 4
lensint 1 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
x in totalabstractions 10
lens 4 4
lensint 2 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
x in totalabstractions 11
lens 4 4
lensint 3 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
x in totalabstractions 12
lens 4 4
lensint 0 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 13
lens 4 4
lensint 1 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 14
lens 4 4
lensint 2 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
x in totalabstractions 15
lens 4 4
lensint 3 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], [[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
NOW TO CROSS WITH MEMORY
WTRFFFFF 96
skipfactor 16
OK WE ARE COMPARING  0 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  1 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  2 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  3 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  4 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  5 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  6 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  7 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  8 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  9 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  10 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  11 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  12 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  13 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  14 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  15 [["TOTAL_ARGUMENT == 'print('dont force errors')'", ['None', '']]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('dont force errors')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  16 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  17 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  18 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  19 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  20 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  21 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  22 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  23 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  24 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  25 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  26 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  27 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  28 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  29 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  30 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  31 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['dont force errors\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'dont force errors\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  32 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  33 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  34 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  35 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  36 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  37 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  38 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  39 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  40 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  41 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  42 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  43 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  44 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  45 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  46 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  47 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('dont force errors')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'dont force errors\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['dont force errors\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
OK WE ARE COMPARING  48 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  49 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  50 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  51 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('α1errα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  52 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  53 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  54 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  55 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  56 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  57 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  58 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  59 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' [α0print('the line')]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  60 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  61 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  62 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  63 [["TOTAL_ARGUMENT == 'print('the line')'", ['None', '']]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('the line')' Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  64 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  65 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  66 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  67 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  68 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  69 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  70 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  71 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  72 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  73 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  74 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  75 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  76 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  77 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  78 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  79 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['the line\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'the line\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  80 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  81 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  82 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  83 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('α1errα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('α1errα2", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('"], ["print('"]], [['α1'], ['α1']], [['err'], ['err']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  84 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  85 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  86 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  87 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  88 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  89 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  90 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  91 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) [α0print('the line')]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["[α0print('the line')]", '']
thjis is actual [[[[['['], ['[']], [['α0'], ['α0']], [["print('the line')]"], ["print('the line')]"]]], '']]
OK WE ARE COMPARING  92 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  93 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  94 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
OK WE ARE COMPARING  95 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'the line\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['the line\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"], ["\\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]]], '']]
STARTHERE
[α0print('α1errα2

=
[α0print('α1errα2

=
[α0print('α1errα2

=
[α0print('α1errα2

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
[α0print('the line')]

=
[α0print('the line')]

=
[α0print('the line')]

=
[α0print('the line')]

=
Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0\Mira.py, print('the line')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
ENDHERE
wtf nearfield []
how many attempts? False []
tell me encoding cp1252
exit or logout to leave 
