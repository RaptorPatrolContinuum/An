[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('keep going')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'keep going\\\')"]\\n\']\n', "['descent = true means NOT cloned True C:\\\\An\\\\MIRA\\\\MIRA_B\\n']\n", "['this is the diff in mirab\\n']\n", "['dogshit? Traceback (most recent call last):\\n']\n", '[\'  File "C:\\\\An\\\\MIRA\\\\Mira.py", line 28, in <module>\\n\']\n', '[\'    print("dogshit?","\\\\u03b1")\\n\']\n', '[\'  File "C:\\\\Personalize\\\\Python 3\\\\lib\\\\encodings\\\\cp1252.py", line 19, in encode\\n\']\n', "['    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\\n']\n", '["UnicodeEncodeError: \'charmap\' codec can\'t encode character \'\\\\u03b1\' in position 0: character maps to <undefined>\\n"]\n']]]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('not always delta2')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'not always delta2\\\')"]\\n\']\n', "['descent = true means NOT cloned True C:\\\\An\\\\MIRA\\\\MIRA_B\\n']\n", "['this is the diff in mirab\\n']\n", "['dogshit? Traceback (most recent call last):\\n']\n", '[\'  File "C:\\\\An\\\\MIRA\\\\Mira.py", line 28, in <module>\\n\']\n', '[\'    print("dogshit?","\\\\u03b1")\\n\']\n', '[\'  File "C:\\\\Personalize\\\\Python 3\\\\lib\\\\encodings\\\\cp1252.py", line 19, in encode\\n\']\n', "['    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\\n']\n", '["UnicodeEncodeError: \'charmap\' codec can\'t encode character \'\\\\u03b1\' in position 0: character maps to <undefined>\\n"]\n']]]
[["TOTAL_ARGUMENT == 'print('error is to set right setting on windows console')'", ['None', '']]]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('error is to set right setting on windows console')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'error is to set right setting on windows console\\\')"]\\n\']\n', "['wtf nearfield2 []\\n']\n", "['error is to set right setting on windows console\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'error is to set right setting on windows console\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'error is to set right setting on windows console\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['error is to set right setting on windows console\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'error is to set right setting on windows console\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('error is to set right setting on windows console')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'error is to set right setting on windows console\\\')"]\\n\']\n', "['wtf nearfield2 []\\n']\n", "['error is to set right setting on windows console\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['error is to set right setting on windows console\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
[["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
