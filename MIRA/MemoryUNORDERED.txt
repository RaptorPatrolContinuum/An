[['FixedQualifier([delta2,[print("α0")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("yoikes don\\\'t worry about apostrophes if you have a good enough description")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("yoikes don\\\'t worry about apostrophes if you have a good enough description")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("yoikes don\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", '["yoikes don\'t worry about apostrophes if you have a good enough description\\n"]\n', '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("yoikes don\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfieldClone2 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("yoikes don\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '["yoikes don\'t worry about apostrophes if you have a good enough description\\n"]\n', "['already saw that 2\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("yoikes don\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("yoikes don\\\'t worry about apostrophes if you have a good enough description")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("yoikes don\\\\\\\\\\\\\\\'t worry about apostrophes if you have a good enough description")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", '["yoikes don\'t worry about apostrophes if you have a good enough description\\n"]\n', "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n", "['wtf nearfieldClone2 []\\n']\n", '["yoikes don\'t worry about apostrophes if you have a good enough description\\n"]\n', "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n"]]]
[['FixedQualifier([delta2,α0print("yoikes don\\\'t worry about apostrophes if you have a good enough description")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0\\Mira.py, print("yoikes don\\\'t worry about apostrophes if you have a good enough description")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0print("yoikes don\\\'t worry about apostrophes if you have a good enough description")],α1erα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, restarting], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '["how many attempts? True [\'restarting\']\\n"]\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['Traceback (most recent call last):\\n']\n", '[\'  File "C:\\\\An\\\\MIRA\\\\Mira.py", line 53, in <module>\\n\']\n', '["    nearfield = TestCode([open(MemoryUNORDERED, \'a+\'),inputtext,nearfield,memoryLong,basisname,MemoryUNORDERED,Descent])\\n"]\n', '[\'  File "C:\\\\An\\\\MIRA\\\\MiraExternals.py", line 5349, in TestCode\\n\']\n', '[\'    internaltest2 = [["TOTAL_ARGUMENT == \\\'"+ str(inputtext) +"\\\'",[str(eval(inputtext)),""]]]\\n\']\n', '[\'  File "<string>", line 1, in <module>\\n\']\n', '["NameError: name \'restarting\' is not defined\\n"]\n']]]
[["FixedQualifier([delta2,['α0outα1stα2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,α0\\Mira.py, α1], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1outα2stα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["FixedQualifier([delta2,['pα0inα1,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, restarting], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['TOTAL_ARGUMENT == \'print("what garbage do I print")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("what garbage do I print")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("what garbage do I print")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['what garbage do I print\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("what garbage do I print")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfieldClone2 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("what garbage do I print")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['what garbage do I print\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("what garbage do I print")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("what garbage do I print")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("what garbage do I print")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['what garbage do I print\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['what garbage do I print\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n"]]]
[['FixedQualifier([delta2,[\'α0print("α1 doα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0\\Mira.py, print("α1")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2")],α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["FixedQualifier([delta2,Popen(['python',C:\\α0], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[["FixedQualifier([delta2,α0eα1['pα2inα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,[\'α0print("what garbage do I print")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,Popen([α0\\Mira.py, print("what garbage do I print")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2 doα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("what garbage do I print")],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("printing out more garbagew")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("printing out more garbagew")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("printing out more garbagew")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['printing out more garbagew\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("printing out more garbagew")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfieldClone2 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("printing out more garbagew")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['printing out more garbagew\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("printing out more garbagew")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("printing out more garbagew")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("printing out more garbagew")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['printing out more garbagew\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['printing out more garbagew\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n"]]]
[['FixedQualifier([delta2,[\'α0print("α1out α2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2out α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2inα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0print("α1 garbageα2")α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0print("α1 garbageα2")],α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,[\'α0print("printing out more garbagew")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,Popen([α0\\Mira.py, print("printing out more garbagew")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("printing out more garbagew")],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["TOTAL_ARGUMENT == 'print('respec')'", ['None', '']]]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('respec')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfieldClone2 []\\n']\n", "['respec\\n']\n", '[\'wtf nearfieldClone3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'respec\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfieldClone2 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'respec\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['respec\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfieldClone3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'respec\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('respec')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfieldClone2 []\\n']\n", "['respec\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['respec\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n"]]]
[["FixedQualifier([delta2,['α0print(α1outα2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,α0\\Mira.py, print(α1)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print(α2)],α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print(α2doα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1 printα2)],α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print(α2outα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print(α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["FixedQualifier([delta2,[α0print('respec')],TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[["FixedQualifier([delta2,Popen(['python',C:\\α0\\Mira.py, print('respec')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[["FixedQualifier([delta2,α0([α1print('respec')],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['TOTAL_ARGUMENT == \'print("lady")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("lady")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfieldClone2 []\\n']\n", "['lady\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("lady")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfieldClone2 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("lady")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['lady\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfieldClone3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("lady")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("lady")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfieldClone2 []\\n']\n", "['lady\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n", "['wtf nearfieldClone2 []\\n']\n", "['lady\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfieldClone3 []\\n']\n"]]]
[['TOTAL_ARGUMENT == \'print("oof")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("oof")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['oof\\n']\n", "['oof\\n']\n", "['already saw that 2\\n']\n"]]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("oof")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['oof\\n']\n", "['already saw that 2\\n']\n", "['oof\\n']\n", "['already saw that 2\\n']\n"]]]
[['FixedQualifier([delta2,[\'α0print("α1outα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,[\'α0print("α1")α2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2doα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2outα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2")α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,[α0print(α1esα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,[\'α0print("oof")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,Popen([α0\\Mira.py, print("oof")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("oof")],α2erα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["TOTAL_ARGUMENT == 'print('symbol manipulation and feedback from sensory functions to create something that learns from data')'", ['None', '']]]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('symbol manipulation and feedback from sensory functions to create something that learns from data')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['symbol manipulation and feedback from sensory functions to create something that learns from data\\n']\n", "['symbol manipulation and feedback from sensory functions to create something that learns from data\\n']\n"]]]
[["FixedQualifier([delta2,['α0print(α1tionα2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,α0([α1print(α2tionα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["TOTAL_ARGUMENT == '1+1'", ['2', '']]]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, 1+1], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", []]]
[["FixedQualifier([delta2,['α0print(α1ing α2,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,α0([α1print(α2ing α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print(α2edα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['TOTAL_ARGUMENT == \'print("bukD")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("bukD")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['bukD\\n']\n", "['bukD\\n']\n"]]]
[['TOTAL_ARGUMENT == \'print("test")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("test")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['test\\n']\n", "['test\\n']\n"]]]
[['FixedQualifier([delta2,α0([α1print(α2esα3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["FixedQualifier([delta2,['α0,TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
[['FixedQualifier([delta2,[\'α0print("α1t")α2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0\\Mira.py, print("α1t")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,α0([α1print("α2t")],α3,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,[α0print(α1teα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,[\'α0print("test")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[['FixedQualifier([delta2,Popen([α0\\Mira.py, print("test")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
[["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, rciy], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['Traceback (most recent call last):\\n']\n", '[\'  File "C:\\\\An\\\\MIRA\\\\Mira.py", line 53, in <module>\\n\']\n', '["    nearfield = TestCode([open(MemoryUNORDERED, \'a+\'),inputtext,nearfield,memoryLong,basisname,MemoryUNORDERED,Descent])\\n"]\n', '[\'  File "C:\\\\An\\\\MIRA\\\\MiraExternals.py", line 5367, in TestCode\\n\']\n', '[\'    internaltest2 = [["TOTAL_ARGUMENT == \\\'"+ str(inputtext) +"\\\'",[str(eval(inputtext)),""]]]\\n\']\n', '[\'  File "<string>", line 1, in <module>\\n\']\n', '["NameError: name \'rciy\' is not defined\\n"]\n']]]
[['TOTAL_ARGUMENT == \'print("mask off")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("mask off")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['mask off\\n']\n", "['mask off\\n']\n"]]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("oof")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['oof\\n']\n", "['oof\\n']\n"]]]
[['TOTAL_ARGUMENT == \'print("fly me to the star")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("fly me to the star")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['fly me to the star\\n']\n", "['fly me to the star\\n']\n"]]]
[['TOTAL_ARGUMENT == \'print("holy shit")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("holy shit")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['holy shit\\n']\n", "['holy shit\\n']\n"]]]
[['TOTAL_ARGUMENT == \'print("monkaS")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("monkaS")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['monkaS\\n']\n", "['monkaS\\n']\n"]]]
[['TOTAL_ARGUMENT == \'print("monkaSHAKE")\'', ['None', '']]]
[['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("monkaSHAKE")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['monkaSHAKE\\n']\n", "['monkaSHAKE\\n']\n"]]]
