Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 17:26:49) [MSC v.1900 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> 
===================== RESTART: C:\An\MIRA\MIRA_B\Mira.py =====================
wtf nearfield []
how many attempts? False []
tell me encoding cp1252
exit or logout to leave 
print("pls finish")
wtf nearfield2 []
wtf nearfield []
how many attempts? True ['print("pls finish")']
tell me encoding cp1252
wtf nearfield2 []
pls finish
wtf nearfield3 ['[[\'TOTAL_ARGUMENT == \\\'print("pls finish")\\\'\', [\'None\', \'\']]]']
wtf nearfield4 ['[[\'TOTAL_ARGUMENT == \\\'print("pls finish")\\\'\', [\'None\', \'\']]]']
pls finish
already saw that 2
wtf nearfield5 ['[[\'TOTAL_ARGUMENT == \\\'print("pls finish")\\\'\', [\'None\', \'\']]]']
wtf nearfield3 ['[[\'Popen([\\\'python\\\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\', ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True [\\\\\\\'print("pls finish")\\\\\\\']\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'pls finish\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'pls finish\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]']
wtf nearfield4 ['[[\'Popen([\\\'python\\\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\', ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True [\\\\\\\'print("pls finish")\\\\\\\']\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'pls finish\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'pls finish\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]']
wtf nearfield []
how many attempts? True ['print("pls finish")']
tell me encoding cp1252
wtf nearfield2 []
pls finish
already saw that 2
wtf nearfield3 []
wtf nearfield4 []
pls finish
already saw that 2
wtf nearfield5 []
wtf nearfield5 ['[[\'Popen([\\\'python\\\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\', ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True [\\\\\\\'print("pls finish")\\\\\\\']\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'pls finish\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'pls finish\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]', '[[\'Popen([\\\'python\\\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\', ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True [\\\\\\\'print("pls finish")\\\\\\\']\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'pls finish\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield3 []\\\\n\']\\n", "[\'wtf nearfield4 []\\\\n\']\\n", "[\'pls finish\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield5 []\\\\n\']\\n"]]]']
WTF nearfield7 ['[[\'Popen([\\\'python\\\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\', ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True [\\\\\\\'print("pls finish")\\\\\\\']\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'pls finish\\\\n\']\\n", \'[\\\'wtf nearfield3 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', \'[\\\'wtf nearfield4 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\', "[\'pls finish\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", \'[\\\'wtf nearfield5 [\\\\\\\'[[\\\\\\\\\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\', [\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\']]]\\\\\\\']\\\\n\\\']\\n\']]]', '[[\'Popen([\\\'python\\\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\', ["[\'wtf nearfield []\\\\n\']\\n", \'[\\\'how many attempts? True [\\\\\\\'print("pls finish")\\\\\\\']\\\\n\\\']\\n\', "[\'tell me encoding cp1252\\\\n\']\\n", "[\'wtf nearfield2 []\\\\n\']\\n", "[\'pls finish\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield3 []\\\\n\']\\n", "[\'wtf nearfield4 []\\\\n\']\\n", "[\'pls finish\\\\n\']\\n", "[\'already saw that 2\\\\n\']\\n", "[\'wtf nearfield5 []\\\\n\']\\n"]]]']
dogshit3 [[['α0'], ['α0']], [["print('')"], ["print('')"]]]
x in nearfield [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
fcheck True
fcheck2 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
hey hey hey <class 'str'>
WHO IS SAYING THIS? False
supposed answer []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print('g')'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print('g')'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(\'g\')\'"]', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'g\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['TOTAL_ARGUMENT == \'print("rains")\'']
stats for arg3 ['TOTAL_ARGUMENT == \'print("rains")\''] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
append ? True
DONT STOP MODORENA FLASHBACK ['[\'TOTAL_ARGUMENT == \\\'print("rains")\\\'\']', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['TOTAL_ARGUMENT == \'print("pls finish")\'']
stats for arg3 ['TOTAL_ARGUMENT == \'print("pls finish")\''] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]]
append ? True
DONT STOP MODORENA FLASHBACK ['[\'TOTAL_ARGUMENT == \\\'print("pls finish")\\\'\']', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
stats for arg3 ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? True
DONT STOP MODORENA FLASHBACK ['[\'Popen([\\\'python\\\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\']', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
stats for arg3 ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
am I getting error here? [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
SEEKFORCE ARGLIST ['Memory.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print(f)'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print(f)'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(f)\'"]', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]
am I getting error here? [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]]
COMPART MEMCOMPOSE WITH GUESSABST
MEMCOMPOSE b'[[[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print(\'], [\'print(\']], [[\'"\'], [\'"\']], [[\'\xce\xb11\'], [\'\xce\xb11\']]], [[["Popen([\'python\',C:\\\\"], ["Popen([\'python\',C:\\\\"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\'], [\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\']]], [[["[\'"], ["[\'"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print("\'], [\'print("\']], [[\'\xce\xb11\'], [\'\xce\xb11\']], [[\'in\'], [\'in\']], [[\'\xce\xb12\'], [\'\xce\xb12\']]], [[["[\'"], ["[\'"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print("pls finish")\'], [\'print("pls finish")\']], [[\']\'], [\']\']]], [[[\'Popen([\'], [\'Popen([\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\'], [\'\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\']]], [[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print(\'], [\'print(\']], [[\'"\'], [\'"\']], [[\'\xce\xb11\'], [\'\xce\xb11\']]]]'
guessAbst [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
double check dict {'0': [], '1': [], '2': [], '3': []}
check lengths 4 4
what is anothersum? 4
totalcheck 16
x in totalabstractions 0
lens 4 4
lensint 0 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 1
lens 4 4
lensint 1 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 2
lens 4 4
lensint 2 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 3
lens 4 4
lensint 3 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 4
lens 4 4
lensint 0 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 5
lens 4 4
lensint 1 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 6
lens 4 4
lensint 2 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 7
lens 4 4
lensint 3 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 8
lens 4 4
lensint 0 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 9
lens 4 4
lensint 1 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 10
lens 4 4
lensint 2 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 11
lens 4 4
lensint 3 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 12
lens 4 4
lensint 0 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 13
lens 4 4
lensint 1 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 14
lens 4 4
lensint 2 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 15
lens 4 4
lensint 3 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
NOW TO CROSS WITH MEMORY
WTRFFFFF 96
skipfactor 16
OK WE ARE COMPARING  0 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  1 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  2 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  4 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 4 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  5 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 5 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  6 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  7 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  8 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  9 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  10 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  11 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  12 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 12 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  13 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 13 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  14 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 14 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  15 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 15 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  16 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  17 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  18 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  19 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  20 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  21 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  22 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  23 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  24 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  25 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  26 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  27 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  28 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  29 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  30 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  31 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  32 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  33 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  34 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  35 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  36 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 4 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  37 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 5 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  38 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  39 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  40 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  41 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  42 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  43 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  44 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 12 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  45 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 13 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  46 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 14 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  47 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 15 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  48 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  49 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  50 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  51 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  52 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 4 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  53 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 5 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  54 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  55 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  56 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  57 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  58 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  59 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  60 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 12 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  61 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 13 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  62 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 14 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  63 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 15 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  64 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  65 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  66 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  67 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  68 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  69 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  70 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  71 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  72 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  73 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  74 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  75 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  76 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  77 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  78 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  79 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  80 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  81 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  82 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  83 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  84 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  85 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  86 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  87 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  88 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  89 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  90 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  91 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  92 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  93 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  94 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  95 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
STARTHERE
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
['α0print("α1inα2

=
['α0print("α1inα2

=
['α0print("α1inα2

=
['α0print("α1inα2

=
['α0print("pls finish")]

=
['α0print("pls finish")]

=
['α0print("pls finish")]

=
['α0print("pls finish")]

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
ENDHERE
x in nearfield [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
fcheck True
fcheck2 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
hey hey hey <class 'str'>
WHO IS SAYING THIS? False
supposed answer []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print('g')'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print('g')'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(\'g\')\'"]', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]
stats for arg3 ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["Popen([\'python\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print(\'g\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)"]', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['TOTAL_ARGUMENT == \'print("rains")\'']
stats for arg3 ['TOTAL_ARGUMENT == \'print("rains")\''] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
append ? True
DONT STOP MODORENA FLASHBACK ['[\'TOTAL_ARGUMENT == \\\'print("rains")\\\'\']', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['TOTAL_ARGUMENT == \'print("pls finish")\'']
stats for arg3 ['TOTAL_ARGUMENT == \'print("pls finish")\''] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]]
append ? True
DONT STOP MODORENA FLASHBACK ['[\'TOTAL_ARGUMENT == \\\'print("pls finish")\\\'\']', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
stats for arg3 ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? True
DONT STOP MODORENA FLASHBACK ['[\'Popen([\\\'python\\\',C:\\\\An\\\\MIRA\\\\MIRA_B\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\']', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
stats for arg3 ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
append ? True
DONT STOP MODORENA FLASHBACK ['[\'FixedQualifier([delta2,[\\\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])\']', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
append ? True
DONT STOP MODORENA FLASHBACK ['[\'FixedQualifier([delta2,[\\\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])\']', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"]
stats for arg3 ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
SEEKFORCE STATS [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
monkaS argList ['MemoryUNORDERED.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])']
stats for arg3 ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])'] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
append ? False
am I getting error here? [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]], [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")'], ['print("pls finish")']], [[']'], [']']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
SEEKFORCE ARGLIST ['Memory.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', <function delta2 at 0x0391C0C0>, <function SeekForcemin1 at 0x0391C3D8>, []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) <class 'str'>
preping for arg3, LINE ["TOTAL_ARGUMENT == 'print(f)'"]
stats for arg3 ["TOTAL_ARGUMENT == 'print(f)'"] Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
SEEKFORCE APPEND [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]
append ? True
DONT STOP MODORENA FLASHBACK ['["TOTAL_ARGUMENT == \'print(f)\'"]', 'Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']
HYPERS [[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]
am I getting error here? [[[['['], ['[']], [['α0'], ['α0']], [['print('], ['print(']], [['"'], ['"']], [['α1'], ['α1']]]]
COMPART MEMCOMPOSE WITH GUESSABST
MEMCOMPOSE b'[[[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print(\'], [\'print(\']], [[\'"\'], [\'"\']], [[\'\xce\xb11\'], [\'\xce\xb11\']]], [[["Popen([\'python\',C:\\\\"], ["Popen([\'python\',C:\\\\"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\'], [\')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\']]], [[["[\'"], ["[\'"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print("\'], [\'print("\']], [[\'\xce\xb11\'], [\'\xce\xb11\']], [[\'in\'], [\'in\']], [[\'\xce\xb12\'], [\'\xce\xb12\']]], [[["[\'"], ["[\'"]], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print("pls finish")\'], [\'print("pls finish")\']], [[\']\'], [\']\']]], [[[\'Popen([\'], [\'Popen([\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\'], [\'\\\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)\']]], [[[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'([\'], [\'([\']], [[\'\xce\xb11\'], [\'\xce\xb11\']], [[\'print("\'], [\'print("\']], [[\'\xce\xb12\'], [\'\xce\xb12\']], [[\'fi\'], [\'fi\']], [[\'\xce\xb13\'], [\'\xce\xb13\']]], [[[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'([\'], [\'([\']], [[\'\xce\xb11\'], [\'\xce\xb11\']], [[\'print("pls finish")],\'], [\'print("pls finish")],\']], [[\'\xce\xb12\'], [\'\xce\xb12\']], [[\'er\'], [\'er\']], [[\'\xce\xb13\'], [\'\xce\xb13\']]], [[[\'[\'], [\'[\']], [[\'\xce\xb10\'], [\'\xce\xb10\']], [[\'print(\'], [\'print(\']], [[\'"\'], [\'"\']], [[\'\xce\xb11\'], [\'\xce\xb11\']]]]'
guessAbst [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]
stats [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]
stats [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]
stats [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']
stats [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
SEEKFORCE STATS []
monkaS argList ['MemoryUNORDERED.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']
stats [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
SEEKFORCE ARGLIST ['Memory.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
SEEKFORCE STATS []
monkaS argList ['Memory.txt', [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], <function SeekForcemin2 at 0x0391C420>, [], []]
what is X? ["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]
stats [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
this is line UNFILTERED [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] <class 'list'>
this is arg2 UNFILTERED [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]] <class 'list'>
stats for arg3 [["TOTAL_ARGUMENT == 'print(f)'", ['', NameError("name 'f' is not defined",)]]] [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]
SEEKFORCE APPEND dontappend
append ? True
am I getting error here? []
double check dict {'0': [], '1': [], '2': [], '3': [], '4': [], '5': []}
check lengths 6 6
what is anothersum? 6
totalcheck 36
x in totalabstractions 0
lens 6 6
lensint 0 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 1
lens 6 6
lensint 1 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 2
lens 6 6
lensint 2 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 3
lens 6 6
lensint 3 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 4
lens 6 6
lensint 4 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 5
lens 6 6
lensint 5 0 0
the guy is empty []
length of this guy 0
len2int 0
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 6
lens 6 6
lensint 0 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 7
lens 6 6
lensint 1 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 8
lens 6 6
lensint 2 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 9
lens 6 6
lensint 3 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 10
lens 6 6
lensint 4 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 11
lens 6 6
lensint 5 1 0
the guy is empty []
length of this guy 0
len2int 1
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
x in totalabstractions 12
lens 6 6
lensint 0 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 13
lens 6 6
lensint 1 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 14
lens 6 6
lensint 2 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 15
lens 6 6
lensint 3 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 16
lens 6 6
lensint 4 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 17
lens 6 6
lensint 5 2 0
the guy is empty []
length of this guy 0
len2int 2
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
x in totalabstractions 18
lens 6 6
lensint 0 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 19
lens 6 6
lensint 1 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 20
lens 6 6
lensint 2 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 21
lens 6 6
lensint 3 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 22
lens 6 6
lensint 4 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 23
lens 6 6
lensint 5 3 0
the guy is empty []
length of this guy 0
len2int 3
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
x in totalabstractions 24
lens 6 6
lensint 0 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
x in totalabstractions 25
lens 6 6
lensint 1 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
x in totalabstractions 26
lens 6 6
lensint 2 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
x in totalabstractions 27
lens 6 6
lensint 3 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
x in totalabstractions 28
lens 6 6
lensint 4 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
x in totalabstractions 29
lens 6 6
lensint 5 4 0
the guy is empty []
length of this guy 0
len2int 4
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
x in totalabstractions 30
lens 6 6
lensint 0 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
x in totalabstractions 31
lens 6 6
lensint 1 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
x in totalabstractions 32
lens 6 6
lensint 2 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
x in totalabstractions 33
lens 6 6
lensint 3 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
x in totalabstractions 34
lens 6 6
lensint 4 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
x in totalabstractions 35
lens 6 6
lensint 5 5 0
the guy is empty []
length of this guy 0
len2int 5
who is empty [[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], [[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], [[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], [[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]]]
cl 
ABSTRACTION GUESS: [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
NOW TO CROSS WITH MEMORY
WTRFFFFF 1512
skipfactor 36
OK WE ARE COMPARING  0 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  1 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  2 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  3 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  4 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  5 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  6 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  7 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  8 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  9 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  10 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  11 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  12 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  13 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  14 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  15 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  16 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  17 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  18 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  19 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  20 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  21 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  22 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  23 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  24 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  25 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  26 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  27 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  28 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  29 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  30 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  31 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  32 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  33 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  34 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  35 [["TOTAL_ARGUMENT == 'print('g')'", ['None', '']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print('g')' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  36 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  37 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  38 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  39 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  40 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  41 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  42 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  43 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  44 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  45 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  46 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  47 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  48 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  49 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  50 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  51 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  52 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  53 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  54 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  55 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  56 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  57 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  58 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  59 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  60 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  61 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  62 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  63 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  64 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  65 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  66 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  67 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  68 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  69 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  70 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  71 [["Popen(['python',C:\\An\\MIRA\\MIRA_B\\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print('g')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True ["print(\\\'g\\\')"]\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['g\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly2 [] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', '[\'wtf nearfield3 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['g\\n']\n", "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", '[\'shittysearch uses eval have to double check if it fucking works properly4 [0] [["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]]\\n\']\n', "['line vs arg2\\n']\n", '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', '[\'[["TOTAL_ARGUMENT == \\\'print(\\\'g\\\')\\\'", [\\\'None\\\', \\\'\\\']]] <class \\\'str\\\'>\\n\']\n', "['True\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[["TOTAL_ARGUMENT == \\\\\\\'print(\\\\\\\'g\\\\\\\')\\\\\\\'", [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
OK WE ARE COMPARING  72 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  73 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  74 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  75 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  76 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  77 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  78 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  79 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  80 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  81 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  82 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  83 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  84 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  85 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  86 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  87 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  88 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  89 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  90 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  91 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  92 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  93 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  94 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  95 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  96 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  97 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  98 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  99 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  100 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  101 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  102 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  103 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  104 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  105 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  106 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  107 [['TOTAL_ARGUMENT == \'print("rains")\'', ['None', '']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("rains")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  108 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  109 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  110 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  111 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  112 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  113 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  114 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  115 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  116 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  117 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  118 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  119 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("α1inα2
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  120 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  121 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  122 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  123 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  124 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  125 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' ['α0print("pls finish")]
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  126 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  127 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  128 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  129 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  130 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  131 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  132 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  133 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  134 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  135 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  136 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  137 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("α2fiα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  138 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  139 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  140 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  141 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  142 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  143 [['TOTAL_ARGUMENT == \'print("pls finish")\'', ['None', '']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 TOTAL_ARGUMENT == 'print("pls finish")' α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1 ['None', ''] 
RHS True
OK WE ARE COMPARING  144 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  145 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  146 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  147 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  148 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  149 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  150 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  151 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  152 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  153 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  154 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  155 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  156 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  157 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  158 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  159 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  160 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  161 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  162 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  163 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  164 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  165 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  166 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  167 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  168 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  169 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  170 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  171 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  172 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  173 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  174 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  175 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  176 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  177 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  178 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  179 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n']]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", '[\'wtf nearfield3 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', '[\'wtf nearfield4 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n', "['pls finish\\n']\n", "['already saw that 2\\n']\n", '[\'wtf nearfield5 [\\\'[[\\\\\\\'TOTAL_ARGUMENT == \\\\\\\\\\\\\\\'print("pls finish")\\\\\\\\\\\\\\\'\\\\\\\', [\\\\\\\'None\\\\\\\', \\\\\\\'\\\\\\\']]]\\\']\\n\']\n'] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  180 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  181 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  182 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  183 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  184 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  185 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  186 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  187 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  188 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  189 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  190 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  191 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("α1inα2
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  192 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  193 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  194 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  195 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  196 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  197 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) ['α0print("pls finish")]
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  198 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  199 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  200 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  201 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  202 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  203 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  204 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  205 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  206 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  207 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  208 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  209 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("α2fiα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("α2fiα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  210 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  211 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  212 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  213 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  214 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  215 [['Popen([\'python\',C:\\An\\MIRA\\MIRA_B\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"]]]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 Popen(['python',C:\An\MIRA\MIRA_B\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True) α0([α1print("pls finish")],α2erα3
LHS True
RHSpart1 ["['wtf nearfield []\\n']\n", '[\'how many attempts? True [\\\'print("pls finish")\\\']\\n\']\n', "['tell me encoding cp1252\\n']\n", "['wtf nearfield2 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield3 []\\n']\n", "['wtf nearfield4 []\\n']\n", "['pls finish\\n']\n", "['already saw that 2\\n']\n", "['wtf nearfield5 []\\n']\n"] 
RHS True
this guy passed ['α0([α1print("pls finish")],α2erα3', '']
thjis is actual [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
OK WE ARE COMPARING  216 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  217 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  218 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  219 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  220 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  221 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  222 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  223 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  224 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  225 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  226 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  227 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  228 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  229 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  230 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  231 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  232 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  233 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  234 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  235 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  236 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  237 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  238 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  239 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  240 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  241 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  242 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  243 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  244 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  245 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  246 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  247 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  248 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  249 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  250 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  251 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  252 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  253 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  254 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  255 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  256 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  257 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  258 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  259 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  260 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  261 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  262 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  263 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  264 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  265 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  266 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  267 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  268 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  269 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  270 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  271 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  272 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  273 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  274 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  275 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  276 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  277 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  278 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  279 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  280 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  281 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  282 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  283 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  284 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  285 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  286 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  287 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  288 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  289 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  290 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  291 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  292 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  293 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  294 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  295 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  296 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  297 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  298 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  299 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  300 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  301 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  302 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  303 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  304 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  305 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  306 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  307 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  308 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  309 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  310 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  311 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  312 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  313 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  314 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  315 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  316 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  317 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  318 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  319 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  320 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  321 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  322 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  323 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  324 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  325 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  326 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  327 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  328 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  329 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  330 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  331 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  332 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  333 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  334 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  335 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  336 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  337 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  338 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  339 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  340 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  341 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  342 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  343 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  344 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  345 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  346 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  347 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  348 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  349 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  350 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  351 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  352 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  353 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  354 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  355 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  356 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  357 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  358 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  359 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  360 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  361 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  362 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  363 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  364 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  365 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  366 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  367 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  368 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  369 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  370 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  371 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  372 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  373 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  374 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  375 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  376 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  377 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  378 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  379 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  380 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  381 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  382 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  383 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  384 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  385 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  386 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  387 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  388 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  389 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  390 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  391 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  392 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  393 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  394 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  395 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  396 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  397 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  398 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  399 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  400 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  401 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  402 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  403 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  404 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  405 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  406 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  407 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  408 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  409 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  410 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  411 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  412 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  413 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  414 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  415 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  416 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  417 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  418 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  419 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  420 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  421 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  422 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  423 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  424 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  425 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  426 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  427 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  428 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  429 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  430 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  431 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  432 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  433 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  434 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  435 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  436 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  437 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  438 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  439 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  440 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  441 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  442 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  443 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  444 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  445 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  446 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  447 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  448 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  449 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  450 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  451 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  452 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  453 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  454 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  455 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  456 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  457 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  458 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  459 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  460 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  461 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  462 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  463 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  464 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  465 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  466 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  467 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  468 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  469 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  470 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  471 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  472 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  473 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  474 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  475 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  476 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  477 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  478 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  479 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  480 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  481 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  482 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  483 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  484 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  485 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  486 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  487 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  488 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  489 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  490 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  491 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  492 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  493 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  494 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  495 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  496 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  497 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  498 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  499 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  500 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  501 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  502 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  503 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  504 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  505 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  506 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  507 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  508 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  509 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  510 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  511 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  512 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  513 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  514 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  515 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  516 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  517 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  518 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  519 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  520 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  521 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  522 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  523 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  524 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  525 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  526 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  527 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  528 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  529 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  530 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  531 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  532 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  533 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  534 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  535 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  536 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  537 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  538 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  539 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  540 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  541 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  542 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  543 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  544 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  545 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  546 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  547 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  548 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  549 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  550 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  551 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  552 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  553 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  554 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  555 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  556 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  557 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  558 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  559 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  560 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  561 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  562 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  563 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  564 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  565 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  566 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  567 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  568 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  569 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  570 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  571 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  572 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  573 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  574 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  575 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  576 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  577 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  578 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  579 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  580 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  581 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  582 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  583 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  584 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  585 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  586 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  587 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  588 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  589 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  590 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  591 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  592 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  593 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  594 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  595 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  596 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  597 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  598 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  599 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  600 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  601 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  602 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  603 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  604 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  605 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  606 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  607 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  608 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  609 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  610 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  611 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  612 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  613 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  614 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  615 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  616 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  617 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  618 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  619 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  620 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  621 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  622 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  623 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  624 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  625 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  626 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  627 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  628 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  629 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  630 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  631 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  632 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  633 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  634 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  635 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  636 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  637 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  638 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  639 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  640 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  641 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  642 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  643 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  644 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  645 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  646 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  647 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  648 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  649 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  650 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  651 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  652 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  653 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  654 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  655 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  656 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  657 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  658 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  659 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  660 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  661 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  662 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  663 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  664 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  665 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  666 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  667 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  668 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  669 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  670 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  671 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  672 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  673 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  674 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  675 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  676 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  677 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  678 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  679 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  680 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  681 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  682 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  683 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  684 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  685 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  686 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  687 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  688 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  689 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  690 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  691 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  692 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  693 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  694 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  695 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  696 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  697 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  698 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  699 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  700 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  701 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  702 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  703 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  704 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  705 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  706 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  707 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  708 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  709 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  710 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  711 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  712 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  713 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  714 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  715 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  716 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  717 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  718 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  719 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  720 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  721 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  722 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  723 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  724 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  725 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  726 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  727 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  728 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  729 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  730 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  731 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  732 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  733 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  734 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  735 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  736 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  737 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  738 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  739 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  740 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  741 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  742 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  743 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  744 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  745 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  746 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  747 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  748 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  749 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  750 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  751 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  752 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  753 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  754 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  755 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  756 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  757 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  758 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  759 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  760 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  761 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  762 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  763 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  764 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  765 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  766 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  767 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  768 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  769 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  770 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  771 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  772 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  773 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  774 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  775 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  776 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  777 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  778 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  779 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  780 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  781 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  782 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  783 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  784 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  785 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  786 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  787 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  788 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  789 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  790 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  791 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  792 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  793 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  794 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  795 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  796 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  797 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  798 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  799 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  800 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  801 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  802 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  803 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  804 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  805 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  806 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  807 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  808 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  809 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  810 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  811 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  812 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  813 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  814 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  815 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  816 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  817 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  818 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  819 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  820 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  821 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  822 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  823 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  824 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  825 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  826 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  827 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  828 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  829 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  830 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  831 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  832 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  833 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  834 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  835 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  836 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  837 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  838 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  839 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  840 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  841 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  842 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  843 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  844 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  845 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  846 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  847 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  848 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  849 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  850 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  851 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  852 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  853 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  854 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  855 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  856 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  857 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  858 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  859 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  860 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  861 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  862 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  863 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  864 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  865 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  866 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  867 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  868 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  869 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  870 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  871 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  872 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  873 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  874 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  875 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  876 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  877 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  878 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  879 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  880 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  881 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  882 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  883 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  884 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  885 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  886 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  887 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  888 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  889 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  890 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  891 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  892 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  893 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  894 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  895 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  896 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  897 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  898 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  899 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  900 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  901 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  902 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  903 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  904 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  905 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  906 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  907 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  908 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  909 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  910 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  911 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  912 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  913 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  914 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  915 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  916 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  917 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  918 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  919 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  920 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  921 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  922 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  923 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  924 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  925 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  926 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  927 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  928 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  929 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  930 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  931 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  932 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  933 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  934 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  935 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  936 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  937 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  938 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  939 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  940 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  941 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  942 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  943 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  944 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  945 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  946 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  947 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  948 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  949 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  950 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  951 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  952 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  953 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  954 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  955 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  956 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  957 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  958 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  959 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  960 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  961 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  962 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  963 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  964 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  965 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  966 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  967 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  968 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  969 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  970 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  971 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  972 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  973 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  974 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  975 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  976 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  977 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  978 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  979 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  980 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  981 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  982 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  983 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  984 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  985 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  986 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  987 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  988 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  989 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  990 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  991 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  992 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  993 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  994 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  995 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  996 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  997 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  998 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  999 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1000 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1001 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1002 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1003 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1004 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1005 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1006 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1007 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1008 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1009 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1010 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1011 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1012 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1013 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1014 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1015 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1016 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1017 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1018 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1019 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1020 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1021 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1022 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1023 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1024 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1025 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1026 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1027 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1028 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1029 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1030 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1031 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1032 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1033 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1034 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1035 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1036 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1037 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1038 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1039 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1040 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1041 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1042 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1043 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1044 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1045 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1046 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1047 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1048 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1049 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ["Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)", '']
thjis is actual [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1050 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1051 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1052 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1053 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1054 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1055 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1056 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1057 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1058 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1059 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1060 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1061 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1062 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1063 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1064 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1065 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1066 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1067 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1068 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1069 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1070 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1071 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1072 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1073 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1074 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1075 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1076 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1077 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1078 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1079 [["FixedQualifier([delta2,Popen(['python',C:\\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])", '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1080 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1081 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1082 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1083 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1084 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1085 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1086 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1087 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1088 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1089 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1090 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1091 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1092 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1093 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1094 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1095 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1096 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1097 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1098 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1099 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1100 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1101 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1102 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1103 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1104 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1105 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1106 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1107 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1108 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1109 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1110 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1111 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1112 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1113 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1114 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1115 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1116 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1117 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1118 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1119 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1120 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1121 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1122 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1123 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1124 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1125 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1126 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1127 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1128 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1129 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1130 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1131 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1132 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1133 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1134 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1135 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1136 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1137 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1138 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1139 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1140 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1141 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1142 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1143 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1144 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1145 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1146 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1147 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1148 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1149 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1150 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1151 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1152 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1153 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1154 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1155 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1156 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1157 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1158 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1159 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1160 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1161 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1162 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1163 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1164 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1165 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1166 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1167 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1168 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1169 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1170 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1171 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1172 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1173 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1174 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1175 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1176 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1177 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1178 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1179 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1180 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1181 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1182 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1183 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1184 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1185 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1186 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1187 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1188 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1189 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1190 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1191 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1192 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1193 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1194 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1195 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1196 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1197 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1198 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1199 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("α1inα2', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
OK WE ARE COMPARING  1200 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1201 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1202 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1203 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1204 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1205 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1206 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1207 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1208 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1209 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1210 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1211 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1212 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1213 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1214 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1215 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1216 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1217 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1218 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1219 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1220 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1221 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1222 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1223 [['FixedQualifier([delta2,[\'α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("α1inα2,TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1224 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1225 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1226 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1227 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1228 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1229 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1230 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1231 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1232 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1233 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1234 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1235 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1236 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1237 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1238 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1239 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1240 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1241 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1242 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1243 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1244 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1245 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1246 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1247 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1248 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1249 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1250 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1251 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1252 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1253 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1254 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1255 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1256 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1257 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1258 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1259 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1260 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1261 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1262 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1263 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1264 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1265 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1266 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1267 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1268 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1269 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1270 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1271 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1272 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1273 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1274 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1275 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1276 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1277 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1278 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1279 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1280 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1281 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1282 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1283 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1284 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1285 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1286 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1287 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1288 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1289 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1290 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1291 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1292 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1293 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1294 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1295 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1296 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1297 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1298 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1299 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1300 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1301 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1302 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1303 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1304 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1305 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1306 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1307 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1308 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1309 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1310 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1311 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1312 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1313 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1314 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1315 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1316 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1317 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1318 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1319 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1320 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1321 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1322 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1323 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1324 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1325 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1326 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1327 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1328 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1329 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1330 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1331 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1332 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1333 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1334 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1335 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1336 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1337 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1338 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1339 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1340 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1341 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1342 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1343 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1344 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1345 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1346 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1347 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1348 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1349 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS True
RHSpart1  
RHS True
this guy passed ['[\'α0print("pls finish")]', '']
thjis is actual [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
OK WE ARE COMPARING  1350 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1351 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1352 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1353 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1354 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1355 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1356 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1357 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1358 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1359 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1360 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1361 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1362 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1363 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1364 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1365 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1366 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1367 [['FixedQualifier([delta2,[\'α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,['α0print("pls finish")],TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1368 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1369 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1370 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1371 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1372 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1373 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1374 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1375 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1376 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1377 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1378 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1379 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1380 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1381 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1382 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1383 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1384 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1385 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1386 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1387 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1388 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1389 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1390 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1391 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1392 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1393 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1394 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1395 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1396 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1397 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1398 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1399 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1400 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1401 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1402 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1403 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1404 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1405 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1406 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1407 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1408 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1409 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1410 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1411 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1412 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1413 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1414 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1415 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1416 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1417 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1418 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1419 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1420 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1421 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1422 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1423 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1424 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1425 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1426 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1427 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1428 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1429 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1430 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1431 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1432 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1433 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1434 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1435 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1436 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1437 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1438 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1439 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1440 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1441 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1442 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1443 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1444 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1445 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1446 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1447 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1448 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1449 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1450 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1451 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1452 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1453 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1454 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1455 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1456 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1457 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1458 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1459 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1460 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1461 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1462 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1463 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1464 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1465 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1466 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1467 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1468 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1469 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1470 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1471 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1472 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1473 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1474 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1475 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1476 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 0 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1477 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 1 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1478 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 2 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1479 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 3 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1480 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 4 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1481 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 5 [[[[["Popen(['python',C:\\"], ["Popen(['python',C:\\"]], [['α0'], ['α0']], [[')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], [')], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1482 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 6 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1483 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 7 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1484 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 8 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1485 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 9 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1486 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 10 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1487 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 11 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("'], ['print("']], [['α1'], ['α1']], [['in'], ['in']], [['α2'], ['α2']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("α1inα2
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1488 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 12 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1489 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 13 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1490 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 14 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1491 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 15 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1492 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 16 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1493 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 17 [[[[["['"], ["['"]], [['α0'], ['α0']], [['print("pls finish")]'], ['print("pls finish")]']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) ['α0print("pls finish")]
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1494 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 18 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1495 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 19 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1496 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 20 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1497 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 21 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1498 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 22 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1499 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 23 [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)
LHS True
RHSpart1  
RHS True
this guy passed ['Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)', '']
thjis is actual [[[[['Popen(['], ['Popen([']], [['α0'], ['α0']], [['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)'], ['\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)']]], '']]
OK WE ARE COMPARING  1500 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 24 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1501 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 25 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1502 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 26 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1503 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 27 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1504 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 28 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1505 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 29 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("'], ['print("']], [['α2'], ['α2']], [['fi'], ['fi']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("α2fiα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1506 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 30 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1507 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 31 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1508 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 32 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1509 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 33 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1510 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 34 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
OK WE ARE COMPARING  1511 [['FixedQualifier([delta2,Popen([α0\\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1])', '']]
AND THIS LINE 35 [[[[['α0'], ['α0']], [['(['], ['([']], [['α1'], ['α1']], [['print("pls finish")],'], ['print("pls finish")],']], [['α2'], ['α2']], [['er'], ['er']], [['α3'], ['α3']]], '']]
CHECK IS TO TRY delta2 single point condition on both LHS and RHS then if they both pass, write into mem
check types <class 'str'> <class 'str'>
LHSpart1 FixedQualifier([delta2,Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True),TOTAL_ARGUMENT,FixedQualifiermin1]) α0([α1print("pls finish")],α2erα3
LHS False
RHSpart1  
RHS True
STARTHERE
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen(['python',C:\α0)], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
['α0print("α1inα2

=
['α0print("α1inα2

=
['α0print("α1inα2

=
['α0print("α1inα2

=
['α0print("α1inα2

=
['α0print("α1inα2

=
['α0print("pls finish")]

=
['α0print("pls finish")]

=
['α0print("pls finish")]

=
['α0print("pls finish")]

=
['α0print("pls finish")]

=
['α0print("pls finish")]

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
Popen([α0\Mira.py, print("pls finish")], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

=
α0([α1print("α2fiα3

=
α0([α1print("α2fiα3

=
α0([α1print("α2fiα3

=
α0([α1print("α2fiα3

=
α0([α1print("α2fiα3

=
α0([α1print("α2fiα3

=
α0([α1print("pls finish")],α2erα3

=
α0([α1print("pls finish")],α2erα3

=
α0([α1print("pls finish")],α2erα3

=
α0([α1print("pls finish")],α2erα3

=
α0([α1print("pls finish")],α2erα3

=
α0([α1print("pls finish")],α2erα3

=
ENDHERE
wtf nearfield []
how many attempts? False []
tell me encoding cp1252
exit or logout to leave 
